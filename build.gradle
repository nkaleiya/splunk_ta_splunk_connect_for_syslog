/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * Learn how to create Gradle builds at https://guides.gradle.org/creating-new-gradle-builds
 */

plugins {
   id 'com.bulwinkel.gradle.git-version' version '0.2.0'
}

class dockerExec extends Exec {
    Project projectLoc
    String buildVersion

    void dockerCommand(Object... arguments) {
        executable 'docker'
        args = ['run', '-i', '--rm',
          '--env-file', 'gradle.properties',
          '-e', "SPLUNK_BUILD_VERSION=${buildVersion}" ] + arguments.toList()
    }
}

class templateExec extends dockerExec {
    void settemplateFile(String templateFile) {
        dockerCommand(
         '-v', "${projectLoc.projectDir}/package:/work",
          'hairyhenderson/gomplate',
           '-f', "/work/${templateFile}.tmpl", '-o', "/work/${templateFile}"
        )
    }
}

class slimExec extends dockerExec {
    void setpackageVersion(String packageVersion) {
        dockerCommand(
          '-v', "${projectLoc.projectDir}/build:/work",
         'docker.pkg.github.com/rfaircloth-splunk/splunk-packaging-toolkit/splunk-packaging-toolkit:latest',
          "package",
          "-o", "/work/package/splunkbase",
          "/work/app/${packageVersion}"
        )
    }
}

class appInspectExec extends dockerExec {
    String packageLocation
    String buildVersion
    void setpackageName(String packageName) {
        dockerCommand(
          '-v', "${projectLoc.projectDir}/build/package:/work",
          '-v', "${projectLoc.projectDir}/test-reports:/test-reports",
         'docker.pkg.github.com/rfaircloth-splunk/splunk-app-inspect/splunk-app-inspect:latest',
          "inspect",
          "/work/${packageLocation}/${packageName}-${buildVersion}.tar.gz",
          "--data-format", "junitxml",
          "--output-file", "/test-reports/${packageName}-appapproval.xml",
          "--excluded-tags", "manual",
          "--excluded-tags", "prerelease",
          "--included-tags", "appapproval"
        )
    }
}

class genMCTestsExec extends dockerExec {
    String packageLocation
    void setpackageName(String packageName) {
        dockerCommand(
          '-v', "${projectLoc.projectDir}/tests/model-conformance:/out",
          '-v', "${projectLoc.projectDir}//package:/work/Splunk_TA_splunk",
         'docker.pkg.github.com/rfaircloth-splunk/splunk-model-conformance/splunk-model-conformance:latest',
          "gen",
          "-d", "/models/cim/4.13.0/default/data/models",
          "-t", "/work/${packageName}"
        )
    }
}


task templateAppManifest(type: templateExec) {
    inputs.files ("package/app.manifest.tmpl" )
    outputs.files ( "package/manifest.conf"  )

    projectLoc=project
    buildVersion =  gitVersion.name

    templateFile = 'app.manifest'
}
task templateAppconf(type: templateExec) {
    inputs.files ("package/default/app.conf.tmpl" )
    outputs.files ( "package/default/app.conf"  )

    projectLoc=project
    buildVersion = gitVersion.name

    templateFile = 'default/app.conf'
}


task setupTemplates (dependsOn: ['templateAppManifest', 'templateAppconf'] ) {
    println 'in task build Template'
}


task copyPackageContents(type: Copy, dependsOn: "setupTemplates") {

    from "package/"
    exclude "*.tmpl", "local", "metadata/local.meta"
    into "$buildDir/app/${SPLUNK_BUILD_APP_NAME}"
}


task copyReadme(type: Copy) {
    from "README"
    into "$buildDir/app/${SPLUNK_BUILD_APP_NAME}"
}
task copyLICENSE(type: Copy) {
    from 'LICENSE'
    into "$buildDir/app/${SPLUNK_BUILD_APP_NAME}"
}


task build (dependsOn: ['copyPackageContents', 'copyReadme' ,'copyLICENSE' ] ) {
    println 'in task pabuildckage'
}

task packageSplunkBase(type: slimExec,  dependsOn: ["build"]) {
    inputs.dir ( project.fileTree(dir: "build/app/${SPLUNK_BUILD_APP_NAME}", include: "**/*") )
    outputs.files ( "build/package/splunkbase/${SPLUNK_BUILD_APP_NAME}-${gitVersion.name}.tar.gz"  )

    projectLoc=project
    buildVersion = gitVersion.name

    packageVersion = "${SPLUNK_BUILD_APP_NAME}"
}

task bundle (dependsOn: ['packageSplunkBase'] ) {
    println 'in task package'
}

task testAppInspect(type: appInspectExec, dependsOn: ['bundle']) {
    inputs.files ("build/package/splunkbase/${SPLUNK_BUILD_APP_NAME}-${gitVersion.name}.tar.gz" )
    outputs.files ( "test-reports/${SPLUNK_BUILD_APP_NAME}-appapproval.xml"  )

    projectLoc=project
    buildVersion = gitVersion.name
    packageLocation = "splunkbase"

    packageName = "${SPLUNK_BUILD_APP_NAME}"
}

task updateTestsModelConformance(type: genMCTestsExec, dependsOn: ['build']) {
    projectLoc=project
    packageName = "${SPLUNK_BUILD_APP_NAME}"
}
